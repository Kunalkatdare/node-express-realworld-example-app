version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@9.0.0
  aws-ecs: circleci/aws-ecs@4.0.0
  snyk: snyk/snyk@2.1.0
  # sonarcloud: sonarsource/sonarcloud@2.0.0

jobs:
  build:
    docker:
      - image: cimg/node:lts
    working_directory: ~/repo
    steps:
      - checkout
      # - sonarcloud/scan
      - run:
          name: Install dependencies
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - .
      # allow failing unit tests for the demo
      - run:
          name: Run unit tests
          command: npm test || exit 0
  ecr_docker_push:
    environment:
      AWS_ACCOUNT_ID: "682010357027"
      AWS_DEFAULT_REGION: "us-east-1"
    docker:
      - image: cimg/aws:2023.12.1
    steps:
      - aws-cli/setup:
          role_arn: "arn:aws:iam::${AWS_ACCOUNT_ID}:role/circleci-oidc"
      - aws-ecr/create_repo:
          repo: "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}"
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Build Docker Image
          command: |
            cd /tmp/workspace
            chmod +x .circleci/export_env_vars.sh           
            .circleci/export_env_vars.sh
            cat .env
            TAG=$CIRCLE_SHA1
            docker build -t ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}:$TAG .
            # Log in to AWS ECR
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            docker tag ${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}:$TAG ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}:$TAG  
            rm -f .env
      - snyk/scan:
          severity-threshold: high
          docker-image-name: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}:${CIRCLE_SHA1}
          fail-on-issues: true
      - run:
          name: Push Docker Image to ECR
          command: |
            TAG=$CIRCLE_SHA1
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}:$TAG



workflows:
  deployment:
    jobs:
      - build
      - ecr_docker_push:
          requires:
            - build
      - aws-ecs/deploy_service_update:
          name: deploy-dev
          requires:
            - ecr_docker_push
          auth:
              - aws-cli/setup:
                  role_arn: "arn:aws:iam::682010357027:role/circleci-oidc"
                  role_session_name: 'ecs-session'
          family: '${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-dev-service'
          cluster: 'dev-cluster'
          container_image_name_updates: 'container=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-dev-container,tag=${CIRCLE_SHA1}'
          verify_revision_is_deployed: true
      - hold:
          type: approval
      - aws-ecs/deploy_service_update:
          name: deploy-qa
          requires:
            - ecr_docker_push
          auth:
              - aws-cli/setup:
                  role_arn: "arn:aws:iam::682010357027:role/circleci-oidc"
                  role_session_name: 'ecs-session'
          family: '${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-qa-service'
          cluster: 'qa-cluster'
          container_image_name_updates: 'container=${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BRANCH}-qa-container,tag=${CIRCLE_SHA1}'
          verify_revision_is_deployed: true
      - hold:
          type: approval
        